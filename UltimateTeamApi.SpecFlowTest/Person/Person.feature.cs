// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UltimateTeamApi.SpecFlowTest.Person
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PersonFeature : object, Xunit.IClassFixture<PersonFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Person.feature"
#line hidden
        
        public PersonFeature(PersonFeature.FixtureData fixtureData, UltimateTeamApi_SpecFlowTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Person", "Person", "\tCreate, Update, Delete and Get a Person", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="0. Initialize some Person Intances")]
        [Xunit.TraitAttribute("FeatureTitle", "Person")]
        [Xunit.TraitAttribute("Description", "0. Initialize some Person Intances")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void _0_InitializeSomePersonIntances()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0. Initialize some Person Intances", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table34.AddRow(new string[] {
                            "Sam",
                            "Morales",
                            "ElTioSam",
                            "sam@hotmail.com",
                            "TresNodos",
                            "2002-04-19",
                            "2020-04-19",
                            "null",
                            "1"});
                table34.AddRow(new string[] {
                            "Lucia",
                            "Revollar",
                            "Lulu",
                            "lulu@gmail.com",
                            "CrusUpc#3",
                            "2003-01-09",
                            "2020-01-20",
                            "null",
                            "1"});
                table34.AddRow(new string[] {
                            "Maria",
                            "Santillan",
                            "Maria503",
                            "ma503@yopmail.com",
                            "Password",
                            "2000-07-30",
                            "2018-09-12",
                            "null",
                            "1"});
                table34.AddRow(new string[] {
                            "Lionel",
                            "Messi",
                            "ElMeias",
                            "leo@barzabestclub.com",
                            "elMejorDelMundo",
                            "1212-12-12",
                            "1219-12-12",
                            "null",
                            "1"});
#line 8
 testRunner.When("persons required attributes provided to initialize instances", ((string)(null)), table34, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="1. The person wants to register")]
        [Xunit.TraitAttribute("FeatureTitle", "Person")]
        [Xunit.TraitAttribute("Description", "1. The person wants to register")]
        public virtual void _1_ThePersonWantsToRegister()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1. The person wants to register", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table35.AddRow(new string[] {
                            "Fernan",
                            "Floo",
                            "Fernanfloo",
                            "fernan@elcrack.es",
                            "Contraseña",
                            "1999-05-21",
                            "2020-03-20",
                            "null",
                            "1"});
#line 18
 testRunner.When("the person complete the form with the required fields and click the Register butt" +
                        "on", ((string)(null)), table35, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="2. The person wants to update their data profile")]
        [Xunit.TraitAttribute("FeatureTitle", "Person")]
        [Xunit.TraitAttribute("Description", "2. The person wants to update their data profile")]
        public virtual void _2_ThePersonWantsToUpdateTheirDataProfile()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2. The person wants to update their data profile", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table36.AddRow(new string[] {
                            "Fernando",
                            "Firulais",
                            "FernanElCrack",
                            "fernan@elcrack.es",
                            "NuevaContraseña",
                            "1999-05-21T00:00:00",
                            "2020-05-20T00:00:00",
                            "null",
                            "1"});
#line 25
 testRunner.When("the person with id 5 complete the form with required fields and click the Update " +
                        "button", ((string)(null)), table36, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="3. The administrator wants to see all persons")]
        [Xunit.TraitAttribute("FeatureTitle", "Person")]
        [Xunit.TraitAttribute("Description", "3. The administrator wants to see all persons")]
        public virtual void _3_TheAdministratorWantsToSeeAllPersons()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3. The administrator wants to see all persons", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table37.AddRow(new string[] {
                            "1",
                            "Sam",
                            "Morales",
                            "ElTioSam",
                            "sam@hotmail.com",
                            "TresNodos",
                            "2002-04-19",
                            "2020-04-19",
                            "null",
                            "1"});
                table37.AddRow(new string[] {
                            "2",
                            "Lucia",
                            "Revollar",
                            "Lulu",
                            "lulu@gmail.com",
                            "CrusUpc#3",
                            "2003-01-09",
                            "2020-01-20",
                            "null",
                            "1"});
                table37.AddRow(new string[] {
                            "3",
                            "Maria",
                            "Santillan",
                            "Maria503",
                            "ma503@yopmail.com",
                            "Password",
                            "2000-07-30",
                            "2018-09-12",
                            "null",
                            "1"});
                table37.AddRow(new string[] {
                            "4",
                            "Lionel",
                            "Messi",
                            "ElMeias",
                            "leo@barzabestclub.com",
                            "elMejorDelMundo",
                            "1212-12-12",
                            "1219-12-12",
                            "null",
                            "1"});
                table37.AddRow(new string[] {
                            "5",
                            "Fernando",
                            "Firulais",
                            "FernanElCrack",
                            "fernan@elcrack.es",
                            "NuevaContraseña",
                            "1999-05-21",
                            "2020-05-20",
                            "null",
                            "1"});
#line 32
 testRunner.When("the administrator goes to Persons Page, person list should return", ((string)(null)), table37, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="4. The person wants to see his profile data")]
        [Xunit.TraitAttribute("FeatureTitle", "Person")]
        [Xunit.TraitAttribute("Description", "4. The person wants to see his profile data")]
        public virtual void _4_ThePersonWantsToSeeHisProfileData()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4. The person wants to see his profile data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
 testRunner.When("the person with id 5 goes to Profile Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table38.AddRow(new string[] {
                            "5",
                            "Fernando",
                            "Firulais",
                            "FernanElCrack",
                            "fernan@elcrack.es",
                            "NuevaContraseña",
                            "1999-05-21T00:00:00",
                            "2020-05-20T00:00:00",
                            "null",
                            "1"});
#line 44
 testRunner.Then("person details should be", ((string)(null)), table38, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="5. The person wants to send a friend request")]
        [Xunit.TraitAttribute("FeatureTitle", "Person")]
        [Xunit.TraitAttribute("Description", "5. The person wants to send a friend request")]
        public virtual void _5_ThePersonWantsToSendAFriendRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5. The person wants to send a friend request", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
 testRunner.When("the person send a friend request to email \"lulu@gmail.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table39.AddRow(new string[] {
                            "2",
                            "Lucia",
                            "Revollar",
                            "Lulu",
                            "lulu@gmail.com",
                            "CrusUpc#3",
                            "2003-01-09T00:00:00",
                            "2020-01-20T00:00:00",
                            "null",
                            "1"});
#line 52
 testRunner.Then("the receiving person details should be", ((string)(null)), table39, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="6. The person wants to delete his account")]
        [Xunit.TraitAttribute("FeatureTitle", "Person")]
        [Xunit.TraitAttribute("Description", "6. The person wants to delete his account")]
        public virtual void _6_ThePersonWantsToDeleteHisAccount()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6. The person wants to delete his account", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.When("the person with id 5 click the Delete Account button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table40.AddRow(new string[] {
                            "5",
                            "Fernando",
                            "Firulais",
                            "FernanElCrack",
                            "fernan@elcrack.es",
                            "NuevaContraseña",
                            "1999-05-21T00:00:00",
                            "2020-05-20T00:00:00",
                            "null",
                            "1"});
#line 60
 testRunner.Then("the person with id 5 is removed and removed person details should be", ((string)(null)), table40, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PersonFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PersonFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
