// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UltimateTeamApi.SpecFlowTest.Friendship
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FriendshipFeature : object, Xunit.IClassFixture<FriendshipFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Friendship.feature"
#line hidden
        
        public FriendshipFeature(FriendshipFeature.FixtureData fixtureData, UltimateTeamApi_SpecFlowTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Friendship", "Friendship", "\tAssign, Unassign and Get a Friendship", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="1 Initialize some Friendship Intances")]
        [Xunit.TraitAttribute("FeatureTitle", "Friendship")]
        [Xunit.TraitAttribute("Description", "1 Initialize some Friendship Intances")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void _1InitializeSomeFriendshipIntances()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1 Initialize some Friendship Intances", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table1.AddRow(new string[] {
                            "Sam",
                            "Morales",
                            "ElTioSam",
                            "sam@hotmail.com",
                            "TresNodos",
                            "2002-04-19",
                            "2020-04-19",
                            "null",
                            "1"});
                table1.AddRow(new string[] {
                            "Lucia",
                            "Revollar",
                            "Lulu",
                            "lulu@gmail.com",
                            "CrusUpc#3",
                            "2003-01-09",
                            "2020-01-20",
                            "null",
                            "1"});
                table1.AddRow(new string[] {
                            "Maria",
                            "Santillan",
                            "Maria503",
                            "ma503@yopmail.com",
                            "Password",
                            "2000-07-30",
                            "2018-09-12",
                            "null",
                            "1"});
                table1.AddRow(new string[] {
                            "Lionel",
                            "Messi",
                            "ElMesias",
                            "leo@barzabestclub.com",
                            "elMejorDelMundo",
                            "1212-12-12",
                            "1219-12-12",
                            "null",
                            "1"});
                table1.AddRow(new string[] {
                            "Fernando",
                            "Firulais",
                            "FernanElCrack",
                            "fernan@elcrack.es",
                            "NuevaContraseña",
                            "1999-05-21",
                            "2020-05-20",
                            "null",
                            "1"});
#line 6
 testRunner.When("users required attributes provided to initialize instances", ((string)(null)), table1, "When ");
#line hidden
#line 13
 testRunner.Then("assign the user with Id 1 with the user with Id 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.Then("assign the user with Id 3 with the user with Id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.Then("assign the user with Id 1 with the user with Id 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user wants to see his friend list")]
        [Xunit.TraitAttribute("FeatureTitle", "Friendship")]
        [Xunit.TraitAttribute("Description", "The user wants to see his friend list")]
        public virtual void TheUserWantsToSeeHisFriendList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user wants to see his friend list", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
 testRunner.When("the user with Id 1 goes to Friend Lists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table2.AddRow(new string[] {
                            "2",
                            "Lucia",
                            "Revollar",
                            "Lulu",
                            "lulu@gmail.com",
                            "CrusUpc#3",
                            "2003-01-09",
                            "2020-01-20",
                            "null",
                            "1"});
                table2.AddRow(new string[] {
                            "3",
                            "Maria",
                            "Santillan",
                            "Maria503",
                            "ma503@yopmail.com",
                            "Password",
                            "2000-07-30",
                            "2018-09-12",
                            "null",
                            "1"});
                table2.AddRow(new string[] {
                            "4",
                            "Lionel",
                            "Messi",
                            "ElMesias",
                            "leo@barzabestclub.com",
                            "elMejorDelMundo",
                            "1212-12-12",
                            "1219-12-12",
                            "null",
                            "1"});
#line 21
 testRunner.Then("the friend list of user with Id 1 should be", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user wants be friends with another user")]
        [Xunit.TraitAttribute("FeatureTitle", "Friendship")]
        [Xunit.TraitAttribute("Description", "The user wants be friends with another user")]
        public virtual void TheUserWantsBeFriendsWithAnotherUser()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user wants be friends with another user", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table3.AddRow(new string[] {
                            "5",
                            "Fernando",
                            "Firulais",
                            "FernanElCrack",
                            "fernan@elcrack.es",
                            "NuevaContraseña",
                            "1999-05-21",
                            "2020-05-20",
                            "null",
                            "1"});
#line 30
 testRunner.When("the user with Id 5 accepts the friend request from the user with Id 1, the user d" +
                        "etails should be", ((string)(null)), table3, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="The user wants to delete a friend from his friend list")]
        [Xunit.TraitAttribute("FeatureTitle", "Friendship")]
        [Xunit.TraitAttribute("Description", "The user wants to delete a friend from his friend list")]
        public virtual void TheUserWantsToDeleteAFriendFromHisFriendList()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The user wants to delete a friend from his friend list", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "LastName",
                            "UserName",
                            "Email",
                            "Password",
                            "Birthdate",
                            "LastConnection",
                            "ProfilePicture",
                            "AdministratorId"});
                table4.AddRow(new string[] {
                            "5",
                            "Fernando",
                            "Firulais",
                            "FernanElCrack",
                            "fernan@elcrack.es",
                            "NuevaContraseña",
                            "1999-05-21",
                            "2020-05-20",
                            "null",
                            "1"});
#line 37
 testRunner.When("the user with Id 1 wants to delete the user with Id 5 from his friend list", ((string)(null)), table4, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FriendshipFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FriendshipFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
